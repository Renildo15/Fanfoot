"""

Revision ID: 2455edaa356e
Revises:
Create Date: 2025-09-26 20:44:08.375762

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "2455edaa356e"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "country",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("code", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("flag", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("country", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_country_code"), ["code"], unique=True)
        batch_op.create_index(batch_op.f("ix_country_name"), ["name"], unique=False)

    op.create_table(
        "club",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("short_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("reputation", sa.Integer(), nullable=False),
        sa.Column("budget", sa.Float(), nullable=False),
        sa.Column("wage_budget", sa.Float(), nullable=False),
        sa.Column(
            "federation",
            sa.Enum("FHV", "FRF", "FMH", name="clubfederation"),
            nullable=True,
        ),
        sa.Column("stadium", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("crest_path", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("primary_color", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("secondary_color", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("country_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["country.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("club", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_club_name"), ["name"], unique=True)

    op.create_table(
        "competition",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "type",
            sa.Enum("LEAGUE", "CUP", "LEAGUE_KNOCKOUT", name="competitiontype"),
            nullable=False,
        ),
        sa.Column("level", sa.Integer(), nullable=False),
        sa.Column("max_teams", sa.Integer(), nullable=False),
        sa.Column("points_win", sa.Integer(), nullable=False),
        sa.Column("points_draw", sa.Integer(), nullable=False),
        sa.Column("points_lose", sa.Integer(), nullable=False),
        sa.Column("gd_first", sa.Integer(), nullable=False),
        sa.Column("logo_path", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("primary_color", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("secondary_color", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("country_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["country.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("competition", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_competition_name"), ["name"], unique=False)

    op.create_table(
        "clubcompetition",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("club_id", sa.Integer(), nullable=False),
        sa.Column("competition_id", sa.Integer(), nullable=False),
        sa.Column("season_year", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["club_id"],
            ["club.id"],
        ),
        sa.ForeignKeyConstraint(
            ["competition_id"],
            ["competition.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "coach",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("full_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("surname", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("age", sa.Integer(), nullable=False),
        sa.Column(
            "style",
            sa.Enum(
                "OFFENSIVE",
                "DEFENSIVE",
                "BALANCED",
                "COUNTER_ATTACK",
                "POSSESSION",
                "PRESSING",
                name="coachstyle",
            ),
            nullable=False,
        ),
        sa.Column("reputation", sa.Integer(), nullable=False),
        sa.Column("experience", sa.Integer(), nullable=False),
        sa.Column("salary_weekly", sa.Float(), nullable=False),
        sa.Column("contract_until", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("club_id", sa.Integer(), nullable=True),
        sa.Column("country_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["club_id"],
            ["club.id"],
        ),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["country.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("club_id"),
    )
    with op.batch_alter_table("coach", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_coach_full_name"), ["full_name"], unique=False
        )

    op.create_table(
        "player",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("full_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("surname", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("age", sa.Integer(), nullable=False),
        sa.Column(
            "position",
            sa.Enum(
                "GK",
                "RB",
                "LB",
                "CB",
                "RWB",
                "LWB",
                "CDM",
                "CM",
                "CAM",
                "RM",
                "LM",
                "RW",
                "LW",
                "CF",
                "ST",
                name="position",
            ),
            nullable=False,
        ),
        sa.Column(
            "secondary_position",
            sa.Enum(
                "GK",
                "RB",
                "LB",
                "CB",
                "RWB",
                "LWB",
                "CDM",
                "CM",
                "CAM",
                "RM",
                "LM",
                "RW",
                "LW",
                "CF",
                "ST",
                name="position",
            ),
            nullable=True,
        ),
        sa.Column(
            "preferred_foot",
            sa.Enum("R", "L", "B", name="playerpreferredfoot"),
            nullable=False,
        ),
        sa.Column("height_cm", sa.Integer(), nullable=False),
        sa.Column("weight_kg", sa.Integer(), nullable=False),
        sa.Column("overall", sa.Integer(), nullable=False),
        sa.Column("potential", sa.Integer(), nullable=False),
        sa.Column("morale", sa.Integer(), nullable=False),
        sa.Column("fitness", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "ACTIVE",
                "INJURED",
                "SUSPENDED",
                "ACADEMY",
                "RETIRED",
                name="playerstatus",
            ),
            nullable=False,
        ),
        sa.Column("shirt_number", sa.Integer(), nullable=False),
        sa.Column("salary_weekly", sa.Float(), nullable=False),
        sa.Column("contract_until", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("current_club_id", sa.Integer(), nullable=True),
        sa.Column("country_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["country.id"],
        ),
        sa.ForeignKeyConstraint(
            ["current_club_id"],
            ["club.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("player", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_player_full_name"), ["full_name"], unique=False
        )

    op.create_table(
        "coachhistory",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("coach_id", sa.Integer(), nullable=False),
        sa.Column("club_id", sa.Integer(), nullable=False),
        sa.Column("season_start", sa.Integer(), nullable=False),
        sa.Column("season_end", sa.Integer(), nullable=True),
        sa.Column("matches", sa.Integer(), nullable=False),
        sa.Column("wins", sa.Integer(), nullable=False),
        sa.Column("draws", sa.Integer(), nullable=False),
        sa.Column("losses", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["club_id"],
            ["club.id"],
        ),
        sa.ForeignKeyConstraint(
            ["coach_id"],
            ["coach.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "playerstatsseason",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column("club_id", sa.Integer(), nullable=True),
        sa.Column("competition_id", sa.Integer(), nullable=True),
        sa.Column("season_year", sa.Integer(), nullable=False),
        sa.Column("matches_played", sa.Integer(), nullable=False),
        sa.Column("goals", sa.Integer(), nullable=False),
        sa.Column("assists", sa.Integer(), nullable=False),
        sa.Column("yellow_cards", sa.Integer(), nullable=False),
        sa.Column("red_cards", sa.Integer(), nullable=False),
        sa.Column("avg_rating", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["club_id"],
            ["club.id"],
        ),
        sa.ForeignKeyConstraint(
            ["competition_id"],
            ["competition.id"],
        ),
        sa.ForeignKeyConstraint(
            ["player_id"],
            ["player.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("playerstatsseason")
    op.drop_table("coachhistory")
    with op.batch_alter_table("player", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_player_full_name"))

    op.drop_table("player")
    with op.batch_alter_table("coach", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_coach_full_name"))

    op.drop_table("coach")
    op.drop_table("clubcompetition")
    with op.batch_alter_table("competition", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_competition_name"))

    op.drop_table("competition")
    with op.batch_alter_table("club", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_club_name"))

    op.drop_table("club")
    with op.batch_alter_table("country", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_country_name"))
        batch_op.drop_index(batch_op.f("ix_country_code"))

    op.drop_table("country")
    # ### end Alembic commands ###
